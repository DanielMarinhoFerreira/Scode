%import common.WS
%import common.ESCAPED_STRING
%ignore WS

TYPE_INT: "int"
TYPE_FLOAT: "float"
TYPE_BOOL: "bool"
TYPE_STRING: "str"
TYPE_CHAR: "char"

ID: /[a-zA-Z_][a-zA-Z_0-9]*/

start: value+

value: var_decl
     | assignment
     | if
     | while
     | for
     | func_def
     | func_call
     | print
     | input
     | return

var_decl: type ID "=" expr

type: TYPE_INT | TYPE_FLOAT | TYPE_BOOL | TYPE_STRING | TYPE_CHAR | list_type

list_type: "list" "<" type ">"

assignment: ID assignment_op expr
assignment_op: "=" | "+=" | "-=" | "*=" | "/=" | "%="

print: "print" "(" expr ")"
input: "input" "(" ")"
return: "return" expr

if: "if" "(" expr ")" "{" value+ "}" ["else" "{" value+ "}"]
while: "while" "(" expr ")" "{" value+ "}"
for: "for" "(" type ID "in" expr ")" "{" value+ "}"

func_def: "def" type ID "(" [params] ")" "{" value+ "}"
params: param ("," param)*
param: type ID

func_call: ID "(" [args] ")"
args: expr ("," expr)*

?expr: logic_or
     | index_expr
     | list_access

index_expr: atom "[" expr "]" -> list_access

?logic_or: logic_and
         | logic_or "or" logic_and -> or_expr

?logic_and: equality
          | logic_and "and" equality -> and_expr

?equality: comparison
         | equality "==" comparison -> eq

?comparison: term
          | comparison ">" term -> gt
          | comparison ">=" term -> ge
          | comparison "<" term -> lt
          | comparison "<=" term -> le

?term: factor
     | term "+" factor -> add
     | term "-" factor -> sub

?factor: unary
       | factor "*" unary -> mul
       | factor "/" unary -> div
       | factor "%" unary -> mod

?unary: "not" unary -> not_expr
      | "-" unary -> neg_expr
      | atom

?atom: NUMBER -> number
     | ESCAPED_STRING -> string
     | CHAR_LITERAL -> char
     | "True" -> true
     | "False" -> false
     | ID -> var
     | func_call
     | list_literal
     | "(" expr ")"

list_access: ID "[" expr "]"
list_literal: "{" [expr ("," expr)*] "}"

NUMBER: /\d+(\.\d+)?/
CHAR_LITERAL: /'[^']'/